from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from flask import Flask, request
import google.generativeai as genai
import matplotlib.pyplot as plt
import numpy as np
import io
import re
from dotenv import load_dotenv
import os
from generate_plot import GeneratePlot
from gemini_api import Gemini_api

# Add this line to load variables from .env
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)
app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
flask_app = Flask(__name__)
user_conversations = {}
user_plot_data = {}  

# Initialize Gemini API
gemini_bot = Gemini_api()

def generate_ai_response(prompt, max_retries=3):
    """T·∫°o ph·∫£n h·ªìi t·ª´ Gemini AI v·ªõi retry"""
    for attempt in range(max_retries):
        try:
            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(prompt)
            return response.text
        except Exception as e:
            print(f"‚ùå L·ªói l·∫ßn {attempt + 1}: {e}")
            if attempt == max_retries - 1:
                return "Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau."


@flask_app.route("/")
def home():
    return "Bot is running!"


@flask_app.route("/webhook", methods=["POST"])
def webhook():
    """X·ª≠ l√Ω Webhook t·ª´ Telegram"""
    update_json = request.get_json(force=True)
    print("üì© Nh·∫≠n tin nh·∫Øn t·ª´ Telegram:", update_json)
    update = Update.de_json(update_json, app)
    app.update_queue.put(update)
    return "ok"


async def start_command(update: Update, context: CallbackContext):
    """L·ªánh /start"""
    user_id = update.message.chat_id
    user_conversations[user_id] = []
    user_plot_data[user_id] = []  # Kh·ªüi t·∫°o b·ªô nh·ªõ ƒë·ªì th·ªã
    await update.message.reply_text(
        "Xin ch√†o! T√¥i l√† chatbot h·ªó tr·ª£ v·ªõi Gemini AI.")

async def handle_message(update: Update, context: CallbackContext):
    """X·ª≠ l√Ω tin nh·∫Øn"""
    user_id = update.message.chat_id
    message = update.message.text
    print(f"üì© Nh·∫≠n tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng ({user_id}): {message}")

    # Kh·ªüi t·∫°o b·ªô nh·ªõ n·∫øu ch∆∞a c√≥
    if user_id not in user_conversations:
        user_conversations[user_id] = []
    if user_id not in user_plot_data:
        user_plot_data[user_id] = []

    # X·ª≠ l√Ω y√™u c·∫ßu v·∫Ω ƒë·ªì th·ªã
    if "v·∫Ω" in message or "ƒë·ªì th·ªã" in message:
        user_conversations[user_id].append(f"Ng∆∞·ªùi d√πng: {message}")
        await GeneratePlot.generate_plot(update, context,
                            message.replace("/plot", "").strip())
        return

    # X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng
    user_conversations[user_id].append(f"Ng∆∞·ªùi d√πng: {message}")
    if len(user_conversations[user_id]) > 3:
        user_conversations[user_id].pop(0)

    conversation_history = "\n".join(user_conversations[user_id])
    prompt = f"""
    Vai tr√≤ c·ªßa b·∫°n l√† m·ªôt nh√† ph√¢n t√≠ch kinh t·∫ø chuy√™n nghi·ªáp.
    - kh√¥ng tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn kinh t·∫ø.
    - Tuy·ªát ƒë·ªëi kh√¥ng ch√†o ng∆∞·ªùi d√πng trong c√¢u n√≥i ngo·∫°i tr·ª´ ng∆∞·ªùi d√πng ch√†o b·∫°n.
    - khi ng∆∞·ªùi d√πng ch√†o th√¨ ch·ªâ gi·ªõi thi·ªáu ng·∫Øn g·ªçn kh√¥ng qu√° 4 c√¢u.
    - Ch·ªâ c·∫ßn tr·∫£ l·ªùi tr·ªçng t√¢m v√†o c√¢u h·ªèi.
    - Tr·∫£ l·ªùi l·ªãch s·ª±.
    - Tr√¨nh b√†y ƒë∆°n gi·∫£n, kh√¥ng in ƒë·∫≠m c√°c t·ª´.
    - ƒê√°nh s·ªë c√°c √Ω ch√≠nh m√† b·∫°n mu·ªën tr·∫£ l·ªùi.
    - Kh√¥ng tr·∫£ l·ªùi qu√° d√†i d√≤ng, kh√¥ng tr·∫£ l·ªùi qu√° 200 t·ª´.
    - vi·∫øt c√¢u t√≥m t·∫Øt tr∆∞·ªõc khi ph√¢n t√≠ch c√°c √Ω ch√≠nh
    ƒê√¢y l√† cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥:
    {conversation_history}
    Ng∆∞·ªùi d√πng: {message}
    H√£y tr·∫£ l·ªùi m·ªôt c√°ch chi ti·∫øt, logic v√† c√≥ cƒÉn c·ª© kinh t·∫ø.
    """

    response = generate_ai_response(prompt)
    response = response.replace('*', '')
    print(f"ü§ñ Ph·∫£n h·ªìi t·ª´ Gemini: {response}")

    user_conversations[user_id].append(f"Bot: {response}")

    try:
        await update.message.reply_text(response)
        print("‚úÖ G·ª≠i tin nh·∫Øn th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i tin nh·∫Øn: {e}")


def run_flask():
    """Ch·∫°y Flask ƒë·ªÉ x·ª≠ l√Ω Webhook"""
    flask_app.run(host="0.0.0.0", port=8080)


if __name__ == "__main__":
    app.add_handler(CommandHandler("start", gemini_bot.start_command))
    app.add_handler(CommandHandler("report", gemini_bot.generate_report_command))  # Add this line
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, gemini_bot.handle_message))
    app.run_polling()