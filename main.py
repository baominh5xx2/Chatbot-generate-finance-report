from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from flask import Flask, request
import google.generativeai as genai
import matplotlib.pyplot as plt
import numpy as np
import io
import re
from dotenv import load_dotenv
import os
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# C·∫•u h√¨nh Gemini AI
genai.configure(api_key=GEMINI_API_KEY)

# C·∫•u h√¨nh bot Telegram
app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# Flask ƒë·ªÉ ch·∫°y Webhook
flask_app = Flask(__name__)

# B·ªô nh·ªõ h·ªôi tho·∫°i v√† d·ªØ li·ªáu ƒë·ªì th·ªã
user_conversations = {}
user_plot_data = {}  # L∆∞u tr·ªØ d·ªØ li·ªáu ƒë·ªì th·ªã c·ªßa t·ª´ng ng∆∞·ªùi d√πng


def generate_ai_response(prompt, max_retries=3):
    """T·∫°o ph·∫£n h·ªìi t·ª´ Gemini AI v·ªõi retry"""
    for attempt in range(max_retries):
        try:
            model = genai.GenerativeModel("gemini-2.0-flash")
            response = model.generate_content(prompt)
            return response.text
        except Exception as e:
            print(f"‚ùå L·ªói l·∫ßn {attempt + 1}: {e}")
            if attempt == max_retries - 1:
                return "Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau."


@flask_app.route("/")
def home():
    return "Bot is running!"


@flask_app.route("/webhook", methods=["POST"])
def webhook():
    """X·ª≠ l√Ω Webhook t·ª´ Telegram"""
    update_json = request.get_json(force=True)
    print("üì© Nh·∫≠n tin nh·∫Øn t·ª´ Telegram:", update_json)
    update = Update.de_json(update_json, app)
    app.update_queue.put(update)
    return "ok"


async def start_command(update: Update, context: CallbackContext):
    """L·ªánh /start"""
    user_id = update.message.chat_id
    user_conversations[user_id] = []
    user_plot_data[user_id] = []  # Kh·ªüi t·∫°o b·ªô nh·ªõ ƒë·ªì th·ªã
    await update.message.reply_text(
        "Xin ch√†o! T√¥i l√† chatbot h·ªó tr·ª£ v·ªõi Gemini AI.")


def clean_generated_code(code: str):
    """L√†m s·∫°ch code Python t·ª´ Gemini"""
    patterns = [
        r'```python\s*',  # X√≥a markdown
        r'```\s*',
        r'plt\.show\(\)',  # X√≥a l·ªánh hi·ªÉn th·ªã
        r'#.*\n',  # X√≥a comment
        r'print\(.*\)\n'  # X√≥a l·ªánh print
    ]
    for pattern in patterns:
        code = re.sub(pattern, '', code)
    return code.strip()


async def generate_plot_code(description, last_data=None):
    """T·∫°o code Python v·∫Ω ƒë·ªì th·ªã"""
    prompt = f"""
    - Tr·∫£ v·ªÅ nguy√™n code Python, kh√¥ng gi·∫£i th√≠ch
    - D·ªØ li·ªáu b·ªãa ra ƒë·ªÉ v·∫Ω ƒë·ªì th·ªã
    - M·ªói l·ªánh matplotlib PH·∫¢I xu·ªëng d√≤ng ri√™ng
    - TUY·ªÜT ƒê·ªêI KH√îNG vi·∫øt nhi·ªÅu l·ªánh plt tr√™n c√πng 1 d√≤ng
    - Ch·ªâ vi·∫øt m·ªói l·ªánh m·ªôt d√≤ng duy nh·∫•t
    - N·∫øu c√≥ d·ªØ li·ªáu c≈©, s·ª≠ d·ª•ng l·∫°i: {last_data}
    Y√™u c·∫ßu: {description}
    Code ph·∫£i bao g·ªìm:
    - import matplotlib.pyplot as plt
    - import numpy as np
    - V·∫Ω ƒë·ªì th·ªã v·ªõi plt.plot(), plt.scatter() ho·∫∑c plt.bar()
    - plt.title() v·ªõi ti√™u ƒë·ªÅ ph√π h·ª£p
    - plt.savefig() ƒë·ªÉ l∆∞u h√¨nh ·∫£nh
    - Code ph·∫£i h·ª£p l·ªá v√† c√≥ th·ªÉ ch·∫°y tr·ª±c ti·∫øp m√† kh√¥ng b·ªã l·ªói
    """

    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(prompt)
    raw_code = response.text if response else ""
    cleaned_code = clean_generated_code(raw_code)

    return cleaned_code or """
    import matplotlib.pyplot as plt
    import numpy as np
    plt.plot([1,2,3],[4,5,6])
    plt.title('Bi·ªÉu ƒë·ªì m·∫∑c ƒë·ªãnh')
    plt.savefig('plot.png')
    """


async def generate_plot(update: Update, context: CallbackContext,
                        description: str):
    user_id = update.message.chat_id

    try:
        if not description.strip():
            await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√¥ t·∫£ chi ti·∫øt")
            return

        # L·∫•y d·ªØ li·ªáu c≈© n·∫øu c√≥ y√™u c·∫ßu s·ª≠a ƒë·ªì th·ªã
        last_data = None
        if "s·ª≠a" in description and user_id in user_plot_data and user_plot_data[
                user_id]:
            last_data = user_plot_data[user_id][-1].get("data", {})

        # T·∫°o code v·∫Ω ƒë·ªì th·ªã
        plot_code = await generate_plot_code(description, last_data)

        # Th·ª±c thi code
        plt.clf()
        exec_globals = {"plt": plt, "np": np, "io": io}
        exec_locals = {}
        try:
            exec(plot_code, exec_globals, exec_locals)
        except Exception as e:
            error_msg = f"üö® L·ªñI CODE:\n{plot_code}\nL·ªñI: {str(e)}"
            print(error_msg)
            await update.message.reply_text(
                "H·ªá th·ªëng g·∫∑p l·ªói x·ª≠ l√Ω code v·∫Ω ƒë·ªì th·ªã üò¢")
            return

        # L∆∞u ƒë·ªì th·ªã v√†o buffer
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
        buffer.seek(0)

        # G·ª≠i ·∫£nh qua Telegram
        await update.message.reply_photo(photo=buffer)

        # L∆∞u d·ªØ li·ªáu ƒë·ªì th·ªã
        if user_id not in user_plot_data:
            user_plot_data[user_id] = []
        user_plot_data[user_id].append({
            "description": description,
            "code": plot_code,
            "data": exec_locals  # L∆∞u c√°c bi·∫øn data
        })

        # ƒê√≥ng figure
        plt.close()

    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o ƒë·ªì th·ªã: {e}")
        await update.message.reply_text(
            "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi t·∫°o ƒë·ªì th·ªã. Vui l√≤ng th·ª≠ l·∫°i.")


async def handle_message(update: Update, context: CallbackContext):
    """X·ª≠ l√Ω tin nh·∫Øn"""
    user_id = update.message.chat_id
    message = update.message.text
    print(f"üì© Nh·∫≠n tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng ({user_id}): {message}")

    # Kh·ªüi t·∫°o b·ªô nh·ªõ n·∫øu ch∆∞a c√≥
    if user_id not in user_conversations:
        user_conversations[user_id] = []
    if user_id not in user_plot_data:
        user_plot_data[user_id] = []

    # X·ª≠ l√Ω y√™u c·∫ßu v·∫Ω ƒë·ªì th·ªã
    if "v·∫Ω" in message or "ƒë·ªì th·ªã" in message:
        user_conversations[user_id].append(f"Ng∆∞·ªùi d√πng: {message}")
        await generate_plot(update, context,
                            message.replace("/plot", "").strip())
        return

    # X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng
    user_conversations[user_id].append(f"Ng∆∞·ªùi d√πng: {message}")
    if len(user_conversations[user_id]) > 3:
        user_conversations[user_id].pop(0)

    conversation_history = "\n".join(user_conversations[user_id])
    prompt = f"""
    Vai tr√≤ c·ªßa b·∫°n l√† m·ªôt nh√† ph√¢n t√≠ch kinh t·∫ø chuy√™n nghi·ªáp.
    - kh√¥ng tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn kinh t·∫ø.
    - Tuy·ªát ƒë·ªëi kh√¥ng ch√†o ng∆∞·ªùi d√πng trong c√¢u n√≥i ngo·∫°i tr·ª´ ng∆∞·ªùi d√πng ch√†o b·∫°n.
    - khi ng∆∞·ªùi d√πng ch√†o th√¨ ch·ªâ gi·ªõi thi·ªáu ng·∫Øn g·ªçn kh√¥ng qu√° 4 c√¢u.
    - Ch·ªâ c·∫ßn tr·∫£ l·ªùi tr·ªçng t√¢m v√†o c√¢u h·ªèi.
    - Tr·∫£ l·ªùi l·ªãch s·ª±.
    - Tr√¨nh b√†y ƒë∆°n gi·∫£n, kh√¥ng in ƒë·∫≠m c√°c t·ª´.
    - ƒê√°nh s·ªë c√°c √Ω ch√≠nh m√† b·∫°n mu·ªën tr·∫£ l·ªùi.
    - Kh√¥ng tr·∫£ l·ªùi qu√° d√†i d√≤ng, kh√¥ng tr·∫£ l·ªùi qu√° 200 t·ª´.
    - vi·∫øt c√¢u t√≥m t·∫Øt tr∆∞·ªõc khi ph√¢n t√≠ch c√°c √Ω ch√≠nh
    ƒê√¢y l√† cu·ªôc h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥:
    {conversation_history}
    Ng∆∞·ªùi d√πng: {message}
    H√£y tr·∫£ l·ªùi m·ªôt c√°ch chi ti·∫øt, logic v√† c√≥ cƒÉn c·ª© kinh t·∫ø.
    """

    response = generate_ai_response(prompt)
    response = response.replace('*', '')
    print(f"ü§ñ Ph·∫£n h·ªìi t·ª´ Gemini: {response}")

    user_conversations[user_id].append(f"Bot: {response}")

    try:
        await update.message.reply_text(response)
        print("‚úÖ G·ª≠i tin nh·∫Øn th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i tin nh·∫Øn: {e}")


def run_flask():
    """Ch·∫°y Flask ƒë·ªÉ x·ª≠ l√Ω Webhook"""
    flask_app.run(host="0.0.0.0", port=8080)


if __name__ == "__main__":
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()