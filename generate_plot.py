import matplotlib.pyplot as plt
import numpy as np
import re
import io
from telegram import Update
from telegram.ext import CallbackContext

class GeneratePlot:
    def __init__(self, x, y, gemini_api=None):
        self.x = x
        self.y = y
        self.user_plot_data = {}
        self.gemini_api = gemini_api

    def clean_generated_code(self, code: str):
        patterns = [
            r'```python\s*',  # X√≥a markdown
            r'```\s*',
            r'plt\.show\(\)',  # X√≥a l·ªánh hi·ªÉn th·ªã
            r'#.*\n',  # X√≥a comment
            r'print\(.*\)\n'  # X√≥a l·ªánh print
        ]
        for pattern in patterns:
            code = re.sub(pattern, '', code)
        return code.strip()

    async def generate_plot_code(self, description, last_data=None):
        prompt = f"""
        - Tr·∫£ v·ªÅ nguy√™n code Python, kh√¥ng gi·∫£i th√≠ch
        - D·ªØ li·ªáu b·ªãa ra ƒë·ªÉ v·∫Ω ƒë·ªì th·ªã
        - M·ªói l·ªánh matplotlib PH·∫¢I xu·ªëng d√≤ng ri√™ng
        - TUY·ªÜT ƒê·ªêI KH√îNG vi·∫øt nhi·ªÅu l·ªánh plt tr√™n c√πng 1 d√≤ng
        - Ch·ªâ vi·∫øt m·ªói l·ªánh m·ªôt d√≤ng duy nh·∫•t
        - N·∫øu c√≥ d·ªØ li·ªáu c≈©, s·ª≠ d·ª•ng l·∫°i: {last_data}
        Y√™u c·∫ßu: {description}
        Code ph·∫£i bao g·ªìm:
        - import matplotlib.pyplot as plt
        - import numpy as np
        - V·∫Ω ƒë·ªì th·ªã v·ªõi plt.plot(), plt.scatter() ho·∫∑c plt.bar()
        - plt.title() v·ªõi ti√™u ƒë·ªÅ ph√π h·ª£p
        - plt.savefig() ƒë·ªÉ l∆∞u h√¨nh ·∫£nh
        - Code ph·∫£i h·ª£p l·ªá v√† c√≥ th·ªÉ ch·∫°y tr·ª±c ti·∫øp m√† kh√¥ng b·ªã l·ªói
        """

        try:
            code = self.gemini_api.generate_ai_response(prompt) if self.gemini_api else None
            cleaned_code = self.clean_generated_code(code) if code else None
            return cleaned_code or self.get_default_plot_code()
        except Exception as e:
            print(f"Error generating plot code: {e}")
            return self.get_default_plot_code()

    def get_default_plot_code(self):
        return """
        import matplotlib.pyplot as plt
        import numpy as np
        plt.plot([1,2,3],[4,5,6])
        plt.title('Bi·ªÉu ƒë·ªì m·∫∑c ƒë·ªãnh')
        plt.savefig('plot.png')
        """

    async def generate_plot(self, update: Update, context: CallbackContext, description: str):
        """Changed from static method to instance method"""
        user_id = update.message.chat_id
        try:
            if not description.strip():
                await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√¥ t·∫£ chi ti·∫øt")
                return

            # L·∫•y d·ªØ li·ªáu c≈© n·∫øu c√≥ y√™u c·∫ßu s·ª≠a ƒë·ªì th·ªã
            last_data = None
            if "s·ª≠a" in description and user_id in self.user_plot_data and self.user_plot_data[
                    user_id]:
                last_data = self.user_plot_data[user_id][-1].get("data", {})

            # T·∫°o code v·∫Ω ƒë·ªì th·ªã
            plot_code = await self.generate_plot_code(description, last_data)

            # Th·ª±c thi code
            plt.clf()
            exec_globals = {"plt": plt, "np": np, "io": io}
            exec_locals = {}
            try:
                exec(plot_code, exec_globals, exec_locals)
            except Exception as e:
                error_msg = f"üö® L·ªñI CODE:\n{plot_code}\nL·ªñI: {str(e)}"
                print(error_msg)
                await update.message.reply_text(
                    "H·ªá th·ªëng g·∫∑p l·ªói x·ª≠ l√Ω code v·∫Ω ƒë·ªì th·ªã üò¢")
                return

            # L∆∞u ƒë·ªì th·ªã v√†o buffer
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
            buffer.seek(0)

            # G·ª≠i ·∫£nh qua Telegram
            await update.message.reply_photo(photo=buffer)

            # L∆∞u d·ªØ li·ªáu ƒë·ªì th·ªã
            if user_id not in self.user_plot_data:
                self.user_plot_data[user_id] = []
            self.user_plot_data[user_id].append({
                "description": description,
                "code": plot_code,
                "data": exec_locals  # L∆∞u c√°c bi·∫øn data
            })

            # ƒê√≥ng figure
            plt.close()

        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o ƒë·ªì th·ªã: {e}")
            await update.message.reply_text(
                "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi t·∫°o ƒë·ªì th·ªã. Vui l√≤ng th·ª≠ l·∫°i.")